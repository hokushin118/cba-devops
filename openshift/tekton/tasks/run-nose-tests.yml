# This task mounts a workspace containing the source code, installs
# dependencies listed in `requirements.txt` (if present), and then
# executes Nose tests.  The `database-uri` parameter is optional; if
# provided, it will be set as the `DATABASE_URI` environment variable.
#
# Test results are checked, and the Task will fail if the tests fail.
apiVersion: tekton.dev/v1beta1 # Tekton API version
kind: Task
metadata:
  name: run-nose-tests # Name of the task
  labels:
    app: cba-pipeline
    environment: development
    team: devops
spec:
  description: This task will run nosetests on the provided input.
  workspaces:
    - name: source
      description: The workspace containing the source code to test.
      mountPath: /workspace
  params:
    - name: docker-image
      description: The Docker image to use for task.
      type: string
      default: "python:3.9-slim-bullseye:latest"
    - name: args
      description: Arguments to pass to nose.
      type: string
      default: "-v"
    - name: database-uri
      description: Database connection string.
      type: string
  steps:
    - name: nose
      image: $(params.docker-image)
      workingDir: $(workspaces.source.path)
      env:
        - name: DATABASE_URI
          value: $(params.database-uri)
      resources: # Resource requests and limits
        requests:
          cpu: "500m" # 500 millicores
          memory: "256Mi" # 256 MB of memory
        limits:
          cpu: "2" # 2 CPUs
          memory: "1Gi" # 1 GB of memory
      script: |
        #!/bin/bash
        set -euo pipefail # Ensure that a pipeline fails if any command in the pipeline fails

        echo "Installing dependencies..." 
        
        python -m pip install --upgrade pip wheel
        pip install --no-cache-dir -qr requirements.txt

        # Check if requirements.txt exists before installing
        if [ -f "requirements.txt" ]; then
          pip install --no-cache-dir -qr requirements.txt
        else
          echo "requirements.txt not found, skipping dependency installation."
        fi

        echo "Running Nose tests with arguments: $(params.args)"
        
        nosetests $(params.args)
        
        # Capture and display test results
        test_result=$? # Capture the exit code

        if [[ $test_result -eq 0 ]]; then
          echo "Nose tests PASSED."
        else
          echo "Nose tests FAILED. Check the test output for details."
          exit $test_result # Fail the Task if tests fail
        fi
        
        echo "Nose tests completed."
